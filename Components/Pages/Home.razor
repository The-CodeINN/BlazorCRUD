@page "/"
@inject IDbContextFactory<AppDbContext> DbFactory
    @rendermode InteractiveServer
@inject IDialogService DialogService
@inject IToastService ToastService


<PageTitle>Customers</PageTitle>

@if(Customers is null)
{
    <FluentProgressRing Size="FluentSize.Large" />
}else{
    <FluentGrid
    Justify="JustifyContent.Center"
    Style="margin-top:20px;margin-bottom:20px;"
    >
        <FluentGridItem
        Style="border:1px solid #ddd; border-radius:20px;"

        xs="20"
        >
        <FluentStack>
            <FluentLabel Typo="Typography.PaneHeader">
                Customers
            </FluentLabel>
            <FluentSpacer />
            <FluentAnchor
                IconStart="@(new Icons.Regular.Size24.PersonAdd().WithColor(Color.Success))"
                Href="/customer-form"

            >
                Add New Customer
            </FluentAnchor>
        </FluentStack>
            <FluentDataGrid Items="@Customers">
            <PropertyColumn Property="@(p => p.Id)" Sortable="true" />
                <TemplateColumn
                Title="Avatar"
                Align="@Align.Start"
                >
                    <FluentPersona 
                    ImageSize="30px"
                    Initials="@context!.Name[0]!.ToString().ToUpper()"
                    />
                </TemplateColumn>
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Email)"  Sortable="true" />
                <TemplateColumn
                Title="Actions"
                Align="@Align.End"
                >
                    <FluentButton
                    IconStart="@(new Icons.Regular.Size24.Delete().WithColor(Color.Error))"
                     Appearance="Appearance.Outline"
                    OnClick="() => ShownConfirmAsync(context!.Id)"
                     >

                        Delete
                    </FluentButton>
                    <FluentAnchor
                        Href='@($"/customer-form/{context!.Id}")'
                        IconStart="@(new Icons.Regular.Size24.Edit().WithColor(Color.Lightweight))" 
                        Appearance="Appearance.Accent"
                        >
                        Edit
                    </FluentAnchor>
                </TemplateColumn>
        </FluentDataGrid>
        </FluentGridItem>
    </FluentGrid>
}




@code{
    private AppDbContext? Context { get; set; }
    private IQueryable<Customer>? Customers;
    protected override async Task OnInitializedAsync()
    {
        Context = DbFactory.CreateDbContext();
        await LoadCustomers();
        await base.OnInitializedAsync();
    }

    private async Task ShownConfirmAsync(int id)
    {
        var dialog = await DialogService.ShowConfirmationAsync("Are you sure you want to delete this customer?", "Yes", "No", "Delete Customer");

        var result = await dialog.Result;

        if (!result.Cancelled )
        {
            @* Console.WriteLine("Delete Customer"); *@
            Delete(id);

        }
       
    }

    public async void Delete(int id){
        var customer = await Context!.Customers.SingleOrDefaultAsync(c => c.Id == id);
        if(customer is null){
            ToastService.ShowError($"Customer with id {id} not found");
            return;
        }

        Context!.Customers.Remove(customer);
        var result = await Context!.SaveChangesAsync();

        if(result > 0)
        {
            ToastService.ShowSuccess("Customer deleted successfully");
            await LoadCustomers();
        }
        else
        {
            ToastService.ShowError("An error occured while deleting customer");
        }
    }

    private async Task LoadCustomers()
    {
        var result = await Context!.Customers.ToListAsync();
        Customers = result.AsQueryable();
    }

    public void Dispose()
    {
        Context?.Dispose();
    }
}